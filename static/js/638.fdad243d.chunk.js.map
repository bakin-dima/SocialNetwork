{"version":3,"file":"static/js/638.fdad243d.chunk.js","mappings":"sQAIIA,EAA6B,SAACC,GAAK,MAAM,CAC3CC,OAAQD,EAAME,KAAKD,OACpB,E,UCLD,EAA0B,yBAA1B,EAA2D,uBAA3D,EAAyF,sBAAzF,EAAwH,wBAAxH,EAAwJ,uBAAxJ,EAA0L,0BAA1L,EAA8N,yBAA9N,EAAqQ,6B,oCCWrQ,EATgB,SAAH,GAAyC,IAAnCE,EAAE,EAAFA,GAAIC,EAAO,EAAPA,QAASC,EAAI,EAAJA,MAAc,YAC5C,OACE,iBAAKC,UAAWC,EAAgBJ,GAAIA,EAAG,WACrC,yBAAMC,KACN,0BAAOC,MAGb,E,UCKA,EAXmB,SAACG,GAClB,IAAIC,EAAO,YAAcD,EAAML,GAC/B,OACE,gBAAKG,UAAWC,EAAY,UAC1B,SAAC,KAAO,CAACD,UAAW,SAACI,GAAO,OAAMA,EAAQC,SAAWJ,EAAgB,EAAE,EAAGK,GAAIH,EAAK,SAChFD,EAAMK,QAIf,E,iDCeMC,GAAeC,EAAAA,EAAAA,GAAiB,KAkBhCC,GAAsBC,EAAAA,EAAAA,GAAU,CAAEC,KAAM,wBAAlBD,EAhBL,SAACT,GACtB,OACE,iBAAMW,SAAUX,EAAMY,aAAa,UACjC,iBAAKd,UAAWC,EAAmB,WACjC,SAACc,EAAA,EAAK,CACJC,UAAWC,EAAAA,GACXC,SAAU,CAACC,EAAAA,EAAeX,GAC1BD,KAAM,iBACNa,YAAY,oBACZC,KAAK,SAEP,SAACC,EAAA,EAAM,CAACC,MAAM,eAAeC,WAAW,QAIhD,IAGA,EAvCgB,SAACtB,GACf,IAAIuB,EAAkBvB,EAAMwB,aAAaC,YAAYC,KAAI,SAACC,GAAC,OAAK,SAAC,EAAU,CAAChC,GAAIgC,EAAEhC,GAAeU,KAAMsB,EAAEtB,MAAdsB,EAAEhC,GAAoB,IAC7GiC,EAAmB5B,EAAMwB,aAAaK,aAAaH,KAAI,SAACI,GAAC,OAAK,SAAC,EAAO,CAACnC,GAAImC,EAAEnC,GAAeC,QAASkC,EAAElC,QAASC,KAAMiC,EAAEjC,MAAlCiC,EAAEnC,GAAwC,IAMpI,OACE,iBAAKG,UAAWC,EAAe,WAC7B,iBAAKD,UAAWC,EAAa,WAC3B,gBAAKD,UAAWC,EAAa,SAAEwB,KAC/B,gBAAKzB,UAAWC,EAAgB,SAAE6B,QAEpC,SAACpB,EAAmB,CAACG,SAVL,SAACoB,GACnB/B,EAAMgC,YAAYD,EAAOE,eAC3B,MAWF,ECNA,GAAeC,EAAAA,EAAAA,KAAQC,EAAAA,EAAAA,KAdD,SAAC3C,GACrB,MAAO,CACLgC,aAAchC,EAAMgC,aAExB,IAEyB,SAACY,GACxB,MAAO,CACLJ,YAAa,SAACC,GACZG,GAASC,EAAAA,EAAAA,GAAkBJ,GAC7B,EAEJ,KLVgC,SAACK,GAAe,IACxCC,EAAiB,qGAIpB,OAJoB,8BACrB,WACE,OAAKC,KAAKxC,MAAMP,QACT,SAAC6C,GAAS,UAAKE,KAAKxC,SADI,SAAC,KAAQ,CAACI,GAAI,UAE/C,KAAC,EAJoB,CAASqC,EAAAA,WAShC,OAFqCN,EAAAA,EAAAA,IAAQ5C,EAAR4C,CAAoCI,EAG3E,GKCA,CAAuFG,E","sources":["hoc/withAuthRedirect.js","webpack://social-network/./src/components/Dialogs/Dialogs.module.scss?d037","components/Dialogs/Message/Message.jsx","components/Dialogs/DialogItem/DialogsItem.jsx","components/Dialogs/Dialogs.jsx","components/Dialogs/DialogsContainer.jsx"],"sourcesContent":["import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Navigate } from \"react-router-dom\";\n\nlet mapStateToPropsForRedirect = (state) => ({\n  isAuth: state.auth.isAuth,\n});\n\nexport const withAuthRedirect = (Component) => {\n  class RedirectComponent extends React.Component {\n    render() {\n      if (!this.props.isAuth) return <Navigate to={\"/login\"} />;\n      return <Component {...this.props} />;\n    }\n  }\n\n  let ConnectedAuthRedirectComponent = connect(mapStateToPropsForRedirect)(RedirectComponent);\n\n  return ConnectedAuthRedirectComponent;\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"Dialogs_dialogs__VgYV5\",\"block\":\"Dialogs_block__5D8KQ\",\"user\":\"Dialogs_user__HwNEv\",\"active\":\"Dialogs_active__8puD0\",\"users\":\"Dialogs_users__VUnxU\",\"messages\":\"Dialogs_messages__QfMzk\",\"message\":\"Dialogs_message__6t+gQ\",\"sendMessage\":\"Dialogs_sendMessage__JSKZb\"};","import React from \"react\";\nimport styles from \"../Dialogs.module.scss\";\n\nconst Message = ({ id, message, date, ...props }) => {\n  return (\n    <div className={styles.message} id={id}>\n      <div>{message}</div>\n      <span>{date}</span>\n    </div>\n  );\n};\n\nexport default Message;\n","import React from \"react\";\nimport { NavLink } from \"react-router-dom\";\nimport styles from \"../Dialogs.module.scss\";\n\nconst DialogItem = (props) => {\n  let path = \"/dialogs/\" + props.id;\n  return (\n    <div className={styles.user}>\n      <NavLink className={(NavData) => (NavData.isActive ? styles.active : \"\")} to={path}>\n        {props.name}\n      </NavLink>\n    </div>\n  );\n};\n\nexport default DialogItem;\n","import React from \"react\";\nimport styles from \"./Dialogs.module.scss\";\nimport Message from \"./Message/Message\";\nimport DialogItem from \"./DialogItem/DialogsItem\";\nimport { Field, reduxForm } from \"redux-form\";\nimport { Textarea } from \"../common/FormsControls/FormsControls\";\nimport { maxLengthCreator, requiredField } from \"../../utils/validators/validators\";\nimport Button from \"../common/Button/Button\";\n\nconst Dialogs = (props) => {\n  let dialogsElements = props.messagesPage.dialogsData.map((d) => <DialogItem id={d.id} key={d.id} name={d.name} />);\n  let messagesElements = props.messagesPage.messagesData.map((m) => <Message id={m.id} key={m.id} message={m.message} date={m.date} />);\n\n  let addNewMessage = (values) => {\n    props.sendMessage(values.newMessageBody);\n  };\n\n  return (\n    <div className={styles.dialogs}>\n      <div className={styles.block}>\n        <div className={styles.users}>{dialogsElements}</div>\n        <div className={styles.messages}>{messagesElements}</div>\n      </div>\n      <AddMessageFormRedux onSubmit={addNewMessage} />\n    </div>\n  );\n};\n\nconst maxLength100 = maxLengthCreator(100);\n\nconst AddMessageForm = (props) => {\n  return (\n    <form onSubmit={props.handleSubmit}>\n      <div className={styles.sendMessage}>\n        <Field\n          component={Textarea}\n          validate={[requiredField, maxLength100]}\n          name={\"newMessageBody\"}\n          placeholder=\"Type message here\"\n          cols=\"1px\"\n        />\n        <Button title=\"Send Message\" animation={false} />\n      </div>\n    </form>\n  );\n};\nconst AddMessageFormRedux = reduxForm({ form: \"dialogAddMessageForm\" })(AddMessageForm);\n\nexport default Dialogs;\n","import { connect } from \"react-redux\";\nimport { compose } from \"redux\";\nimport { withAuthRedirect } from \"../../hoc/withAuthRedirect\";\nimport { addMessageCreator } from \"../../redux/messagesReducer\";\nimport Dialogs from \"./Dialogs\";\n\nlet mapStateToProps = (state) => {\n  return {\n    messagesPage: state.messagesPage,\n  };\n};\n\nlet mapDispatchToProps = (dispatch) => {\n  return {\n    sendMessage: (newMessageBody) => {\n      dispatch(addMessageCreator(newMessageBody));\n    },\n  };\n};\n\nexport default compose(connect(mapStateToProps, mapDispatchToProps), withAuthRedirect)(Dialogs);\n"],"names":["mapStateToPropsForRedirect","state","isAuth","auth","id","message","date","className","styles","props","path","NavData","isActive","to","name","maxLength100","maxLengthCreator","AddMessageFormRedux","reduxForm","form","onSubmit","handleSubmit","Field","component","Textarea","validate","requiredField","placeholder","cols","Button","title","animation","dialogsElements","messagesPage","dialogsData","map","d","messagesElements","messagesData","m","values","sendMessage","newMessageBody","compose","connect","dispatch","addMessageCreator","Component","RedirectComponent","this","React","Dialogs"],"sourceRoot":""}